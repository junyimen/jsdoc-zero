#!/usr/bin/env node

/**
 * Module dependencies.
 */

var command       = require('commander'),
    path          = require('path'),
    colors        = require("colors"),
    _             = require('underscore'),
    underscoreStr = require('underscore.string'),
    chalk         = require('chalk'),
    mkdirp        = require('mkdirp'),
    fs            = require('fs'),
    merge         = require('../lib/merge'),
    dox           = require('../lib/default');

merge(_, {str: underscoreStr});

var projectHomePath       = path.resolve('.'),
    defaultConfigFile     = require(path.resolve(__dirname, '../lib/default.json')),
    userDefinedConfigFile = require(path.resolve(projectHomePath, 'dox.config.json')),
    loadConfigFiled       = _.extend(defaultConfigFile, userDefinedConfigFile),
    COMMANDLIST           = ['build'];  // 定义命令列表

loadConfigFiled.projectHomePath = projectHomePath;

if (!_.isArray(loadConfigFiled.source.include)) loadConfigFiled.source.include = defaultConfigFile.source.include;
if (!_.isArray(loadConfigFiled.source.exclude)) loadConfigFiled.source.exclude = defaultConfigFile.source.exclude;
if (!_.isString(loadConfigFiled.source.output)) loadConfigFiled.source.output = defaultConfigFile.source.output;
if (!_.isArray(loadConfigFiled.source.suffix)) loadConfigFiled.source.suffix = defaultConfigFile.source.suffix;

console.log('\n--------------------这里是文档生成工具：--------------------'.rainbow);

command
    .version(
        console.log(`
        name: ${chalk.green(loadConfigFiled.name)}
        version: ${chalk.yellow(loadConfigFiled.version)}
        `)
    )
    .usage('<keywords>')
    .command('build')
    .description('开始生成文档')
    .option('-d \<folder\>', '输入文件夹')
    .option('-o \<folder\>', '输出文件夹');                                // 命令行工具版本展示

console.log('------------------------------------------------------------'.rainbow);
/**
 * 展示帮助信息函数
 */
var showHelp = function () {
    process.stdout.write(command.helpInformation());
    command.emit('--help or -h');
    process.exit(1);
};

command.on('--help', function () {
    console.log('\tCommands:\n'.green);
    console.log('\t\t\$ build       创建文档\n');
    console.log('\tExamples:\n'.green);
    console.log('\t\t\$ doxmate build \-o \<folder\> \-d [\<folder\>,...]\n');
    process.exit(1);
});                                                                                   // 命令行帮助

command.parse(process.argv);

var cmd = command.args[0];                                                           // 命令参数，如 build

if (!cmd) {
    return showHelp();
}

switch (cmd) {
    case 'build':
        if (!judgeCmdExistence(cmd)) showHelp();

        testBuildCommand(process.argv.slice(3));
        //process.exit(1);
        loadConfigFiled.source.exclude = _.map(loadConfigFiled.source.exclude, function (item) {
            return path.normalize(item);
        });
        loadConfigFiled.source.output = path.normalize(loadConfigFiled.source.output);
        dox(loadConfigFiled, function (err) {
            if (err) {
                console.log(chalk.blue.bgRed.bold('\n\t生成文档失败' + err));
                process.exit(1);
            }
        });
        break;
    default:
        console.error(colors.inverse('\n\t提示：不能找到命令 ' + cmd + ' !'));
        return showHelp();
}


console.log(chalk.blue.bgRed.bold('\n\t see ' + loadConfigFiled.source.output + '/index.html'));

process.exit(0);

/**
 * 检查 cmd 是否存在 COMMANDLIST 中
 * @param cmd
 * @returns {boolean}
 */
function judgeCmdExistence(cmd) {
    return _.indexOf(COMMANDLIST, cmd) !== -1;
}
function testBuildCommand(avgs) {
    var outputIndex  = _.indexOf(avgs, '-o'),
        includeIndex = _.indexOf(avgs, '-d');
    if (outputIndex !== -1) {
        if (outputIndex < 3 && _.isString(avgs[outputIndex + 1])) {
            loadConfigFiled.source.output = avgs[outputIndex + 1];
        } else {
            console.log(avgs[includeIndex] + ' : -o 必须是字符串')
        }
    }
    if (includeIndex !== -1) {
        if (avgs[includeIndex + 1]) {
            var includeIndexCache = avgs[includeIndex + 1],
                includeIndexArray = includeIndexCache.substring(1, includeIndexCache.length - 1).split(',');
            if (includeIndex < 3 && _.isArray(includeIndexArray)) {
                loadConfigFiled.source.include = includeIndexArray;
            } else {
                console.log(includeIndexCache + ': -d 必须是数组')
            }
        }
    }
}
/**
 *
 源全局路径（不包含文件） sourceGlobalPath
 源全局路径文件 sourceGlobalPathFile
 源项目路径（不包含文件） sourceProjectPath
 源项目路径文件 sourceProjectPathFile
 源文件名 sourceFileName
 生成全局路径（不包含文件） generateGlobalPath
 生成全局路径文件 generateGlobalPathFile
 生成项目路径（不包含文件） generateProjectPath
 生成项目路径文件 generateProjectPathFile
 生成文件名 generateFileName
 */
